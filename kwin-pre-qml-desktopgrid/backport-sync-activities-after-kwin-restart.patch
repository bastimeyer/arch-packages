diff --git a/src/activities.cpp b/src/activities.cpp
index a4beac566..d7dbd956d 100644
--- a/src/activities.cpp
+++ b/src/activities.cpp
@@ -31,6 +31,7 @@ Activities::Activities(QObject *parent)
     connect(m_controller, &KActivities::Controller::activityRemoved, this, &Activities::removed);
     connect(m_controller, &KActivities::Controller::activityAdded, this, &Activities::added);
     connect(m_controller, &KActivities::Controller::currentActivityChanged, this, &Activities::slotCurrentChanged);
+    connect(m_controller, &KActivities::Controller::serviceStatusChanged, this, &Activities::slotServiceStatusChanged);
 }
 
 Activities::~Activities()
@@ -43,6 +44,20 @@ KActivities::Consumer::ServiceStatus Activities::serviceStatus() const
     return m_controller->serviceStatus();
 }
 
+void Activities::slotServiceStatusChanged()
+{
+    if (m_controller->serviceStatus() != KActivities::Consumer::Running) {
+        return;
+    }
+    const auto windows = Workspace::self()->allClientList();
+    for (auto *const window : windows) {
+        if (window->isDesktop()) {
+            continue;
+        }
+        window->checkActivities();
+    }
+}
+
 void Activities::setCurrent(const QString &activity)
 {
     m_controller->setCurrentActivity(activity);
diff --git a/src/activities.h b/src/activities.h
index f1014a555..d6505eeb5 100644
--- a/src/activities.h
+++ b/src/activities.h
@@ -71,6 +71,7 @@ Q_SIGNALS:
     void removed(const QString &id);
 
 private Q_SLOTS:
+    void slotServiceStatusChanged();
     void slotRemoved(const QString &activity);
     void slotCurrentChanged(const QString &newActivity);
     void reallyStop(const QString &id); // dbus deadlocks suck
diff --git a/src/window.cpp b/src/window.cpp
index d4c8302ce..d573a3c94 100644
--- a/src/window.cpp
+++ b/src/window.cpp
@@ -3543,6 +3543,9 @@ void Window::setOnActivities(const QStringList &newActivitiesList)
     if (!Activities::self()) {
         return;
     }
+    if (Activities::self()->serviceStatus() != KActivities::Consumer::Running) {
+        return;
+    }
     const auto allActivities = Activities::self()->all();
     const auto activityList = [&] {
         auto result = rules()->checkActivity(newActivitiesList);
diff --git a/src/window.h b/src/window.h
index 8ea5a65d2..13755c015 100644
--- a/src/window.h
+++ b/src/window.h
@@ -1063,6 +1063,12 @@ public:
     virtual bool userCanSetNoBorder() const;
     virtual void checkNoBorder();
 
+    /**
+     * Refresh Window's cache of activites
+     * Called when activity daemon status changes
+     */
+    virtual void checkActivities(){};
+
     void setOnActivity(const QString &activity, bool enable);
     void setOnActivities(const QStringList &newActivitiesList);
     void setOnAllActivities(bool all);
diff --git a/src/x11window.h b/src/x11window.h
index 1f644a21d..12a864720 100644
--- a/src/x11window.h
+++ b/src/x11window.h
@@ -175,6 +175,7 @@ public:
     void setNoBorder(bool set) override;
     bool userCanSetNoBorder() const override;
     void checkNoBorder() override;
+    void checkActivities() override;
 
     int sessionStackingOrder() const;
 
@@ -517,7 +518,6 @@ private:
 
     Xcb::StringProperty fetchActivities() const;
     void readActivities(Xcb::StringProperty &property);
-    void checkActivities();
     bool activitiesDefined; // whether the x property was actually set
 
     bool sessionActivityOverride;
